/* 
 * Salestream API
 *
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityEmailEmailIdDelete (string id, string emailId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityEmailEmailIdDeleteWithHttpInfo (string id, string emailId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityEmailEmailIdPut (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityEmailEmailIdPutWithHttpInfo (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityEmailPost (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityEmailPostWithHttpInfo (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityGet (string id, string after = null, string before = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityGetWithHttpInfo (string id, string after = null, string before = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityNoteNoteIdDelete (string id, string noteId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityNoteNoteIdDeleteWithHttpInfo (string id, string noteId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// udpate note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityNoteNoteIdPut (string id, string noteId, string note = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// udpate note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityNoteNoteIdPutWithHttpInfo (string id, string noteId, string note = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivityNotePost (string id, string note);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivityNotePostWithHttpInfo (string id, string note);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivitySmsPost (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivitySmsPostWithHttpInfo (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivitySmsSmsIdDelete (string id, string smsId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivitySmsSmsIdDeleteWithHttpInfo (string id, string smsId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdActivitySmsSmsIdPut (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdActivitySmsSmsIdPutWithHttpInfo (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailEmailIdDeleteAsync (string id, string emailId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailEmailIdDeleteAsyncWithHttpInfo (string id, string emailId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailEmailIdPutAsync (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update email
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailEmailIdPutAsyncWithHttpInfo (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailPostAsync (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailPostAsyncWithHttpInfo (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityGetAsync (string id, string after = null, string before = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityGetAsyncWithHttpInfo (string id, string after = null, string before = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNoteNoteIdDeleteAsync (string id, string noteId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNoteNoteIdDeleteAsyncWithHttpInfo (string id, string noteId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// udpate note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNoteNoteIdPutAsync (string id, string noteId, string note = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// udpate note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNoteNoteIdPutAsyncWithHttpInfo (string id, string noteId, string note = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNotePostAsync (string id, string note);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create note
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNotePostAsyncWithHttpInfo (string id, string note);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsPostAsync (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsPostAsyncWithHttpInfo (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsSmsIdDeleteAsync (string id, string smsId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsSmsIdDeleteAsyncWithHttpInfo (string id, string smsId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsSmsIdPutAsync (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create sms
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsSmsIdPutAsyncWithHttpInfo (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ActivityApi : IActivityApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivityApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class
        /// </summary>
        /// <returns></returns>
        public ActivityApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivityApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  delete email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityEmailEmailIdDelete (string id, string emailId)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityEmailEmailIdDeleteWithHttpInfo(id, emailId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityEmailEmailIdDeleteWithHttpInfo (string id, string emailId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailEmailIdDelete");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailEmailIdDelete");

            var localVarPath = "/lead/{id}/activity/email/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailEmailIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailEmailIdDeleteAsync (string id, string emailId)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityEmailEmailIdDeleteAsyncWithHttpInfo(id, emailId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailEmailIdDeleteAsyncWithHttpInfo (string id, string emailId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailEmailIdDelete");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailEmailIdDelete");

            var localVarPath = "/lead/{id}/activity/email/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailEmailIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  update email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityEmailEmailIdPut (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityEmailEmailIdPutWithHttpInfo(id, emailId, emailId, to, cc, bcc, subject, message, draft, reminderEnabled, reminderDate, schedule);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  update email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityEmailEmailIdPutWithHttpInfo (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailEmailIdPut");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailEmailIdPut");

            var localVarPath = "/lead/{id}/activity/email/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (cc != null) localVarFormParams.Add("cc", this.Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("bcc", this.Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", this.Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (reminderEnabled != null) localVarFormParams.Add("reminderEnabled", this.Configuration.ApiClient.ParameterToString(reminderEnabled)); // form parameter
            if (reminderDate != null) localVarFormParams.Add("reminderDate", this.Configuration.ApiClient.ParameterToString(reminderDate)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailEmailIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  update email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailEmailIdPutAsync (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityEmailEmailIdPutAsyncWithHttpInfo(id, emailId, emailId, to, cc, bcc, subject, message, draft, reminderEnabled, reminderDate, schedule);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  update email
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId">email id</param>
        /// <param name="emailId"> (optional)</param>
        /// <param name="to"> (optional)</param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="subject"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailEmailIdPutAsyncWithHttpInfo (string id, string emailId, string emailId = null, List<string> to = null, List<string> cc = null, List<string> bcc = null, string subject = null, string message = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailEmailIdPut");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailEmailIdPut");

            var localVarPath = "/lead/{id}/activity/email/{emailId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarPathParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (cc != null) localVarFormParams.Add("cc", this.Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("bcc", this.Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", this.Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (reminderEnabled != null) localVarFormParams.Add("reminderEnabled", this.Configuration.ApiClient.ParameterToString(reminderEnabled)); // form parameter
            if (reminderDate != null) localVarFormParams.Add("reminderDate", this.Configuration.ApiClient.ParameterToString(reminderDate)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailEmailIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityEmailPost (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityEmailPostWithHttpInfo(id, emailId, to, subject, message, cc, bcc, draft, reminderEnabled, reminderDate, schedule);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityEmailPostWithHttpInfo (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling ActivityApi->LeadIdActivityEmailPost");

            var localVarPath = "/lead/{id}/activity/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (cc != null) localVarFormParams.Add("cc", this.Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("bcc", this.Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", this.Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (reminderEnabled != null) localVarFormParams.Add("reminderEnabled", this.Configuration.ApiClient.ParameterToString(reminderEnabled)); // form parameter
            if (reminderDate != null) localVarFormParams.Add("reminderDate", this.Configuration.ApiClient.ParameterToString(reminderDate)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityEmailPostAsync (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityEmailPostAsyncWithHttpInfo(id, emailId, to, subject, message, cc, bcc, draft, reminderEnabled, reminderDate, schedule);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="emailId"></param>
        /// <param name="to"></param>
        /// <param name="subject"></param>
        /// <param name="message"></param>
        /// <param name="cc"> (optional)</param>
        /// <param name="bcc"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="reminderEnabled"> (optional)</param>
        /// <param name="reminderDate"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityEmailPostAsyncWithHttpInfo (string id, string emailId, List<string> to, string subject, string message, List<string> cc = null, List<string> bcc = null, bool? draft = null, bool? reminderEnabled = null, int? reminderDate = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'emailId' is set
            if (emailId == null)
                throw new ApiException(400, "Missing required parameter 'emailId' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'to' is set
            if (to == null)
                throw new ApiException(400, "Missing required parameter 'to' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'subject' is set
            if (subject == null)
                throw new ApiException(400, "Missing required parameter 'subject' when calling ActivityApi->LeadIdActivityEmailPost");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling ActivityApi->LeadIdActivityEmailPost");

            var localVarPath = "/lead/{id}/activity/email";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (emailId != null) localVarFormParams.Add("emailId", this.Configuration.ApiClient.ParameterToString(emailId)); // form parameter
            if (to != null) localVarFormParams.Add("to", this.Configuration.ApiClient.ParameterToString(to)); // form parameter
            if (cc != null) localVarFormParams.Add("cc", this.Configuration.ApiClient.ParameterToString(cc)); // form parameter
            if (bcc != null) localVarFormParams.Add("bcc", this.Configuration.ApiClient.ParameterToString(bcc)); // form parameter
            if (subject != null) localVarFormParams.Add("subject", this.Configuration.ApiClient.ParameterToString(subject)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (reminderEnabled != null) localVarFormParams.Add("reminderEnabled", this.Configuration.ApiClient.ParameterToString(reminderEnabled)); // form parameter
            if (reminderDate != null) localVarFormParams.Add("reminderDate", this.Configuration.ApiClient.ParameterToString(reminderDate)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityEmailPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityGet (string id, string after = null, string before = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityGetWithHttpInfo(id, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get lead activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityGetWithHttpInfo (string id, string after = null, string before = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityGet");

            var localVarPath = "/lead/{id}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityGetAsync (string id, string after = null, string before = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityGetAsyncWithHttpInfo(id, after, before);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get lead activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="after">after token (optional)</param>
        /// <param name="before">before token (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityGetAsyncWithHttpInfo (string id, string after = null, string before = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityGet");

            var localVarPath = "/lead/{id}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (after != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "after", after)); // query parameter
            if (before != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "before", before)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityNoteNoteIdDelete (string id, string noteId)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityNoteNoteIdDeleteWithHttpInfo(id, noteId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityNoteNoteIdDeleteWithHttpInfo (string id, string noteId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNoteNoteIdDelete");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling ActivityApi->LeadIdActivityNoteNoteIdDelete");

            var localVarPath = "/lead/{id}/activity/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNoteNoteIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNoteNoteIdDeleteAsync (string id, string noteId)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityNoteNoteIdDeleteAsyncWithHttpInfo(id, noteId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNoteNoteIdDeleteAsyncWithHttpInfo (string id, string noteId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNoteNoteIdDelete");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling ActivityApi->LeadIdActivityNoteNoteIdDelete");

            var localVarPath = "/lead/{id}/activity/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNoteNoteIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  udpate note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityNoteNoteIdPut (string id, string noteId, string note = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityNoteNoteIdPutWithHttpInfo(id, noteId, note);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  udpate note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityNoteNoteIdPutWithHttpInfo (string id, string noteId, string note = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNoteNoteIdPut");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling ActivityApi->LeadIdActivityNoteNoteIdPut");

            var localVarPath = "/lead/{id}/activity/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNoteNoteIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  udpate note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNoteNoteIdPutAsync (string id, string noteId, string note = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityNoteNoteIdPutAsyncWithHttpInfo(id, noteId, note);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  udpate note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="noteId">note id</param>
        /// <param name="note"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNoteNoteIdPutAsyncWithHttpInfo (string id, string noteId, string note = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNoteNoteIdPut");
            // verify the required parameter 'noteId' is set
            if (noteId == null)
                throw new ApiException(400, "Missing required parameter 'noteId' when calling ActivityApi->LeadIdActivityNoteNoteIdPut");

            var localVarPath = "/lead/{id}/activity/note/{noteId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (noteId != null) localVarPathParams.Add("noteId", this.Configuration.ApiClient.ParameterToString(noteId)); // path parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNoteNoteIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivityNotePost (string id, string note)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivityNotePostWithHttpInfo(id, note);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivityNotePostWithHttpInfo (string id, string note)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNotePost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ActivityApi->LeadIdActivityNotePost");

            var localVarPath = "/lead/{id}/activity/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivityNotePostAsync (string id, string note)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivityNotePostAsyncWithHttpInfo(id, note);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create note
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="note"></param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivityNotePostAsyncWithHttpInfo (string id, string note)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivityNotePost");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling ActivityApi->LeadIdActivityNotePost");

            var localVarPath = "/lead/{id}/activity/note";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivityNotePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivitySmsPost (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivitySmsPostWithHttpInfo(id, phoneId, detailId, message, draft, schedule);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivitySmsPostWithHttpInfo (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsPost");

            var localVarPath = "/lead/{id}/activity/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (phoneId != null) localVarFormParams.Add("phoneId", this.Configuration.ApiClient.ParameterToString(phoneId)); // form parameter
            if (detailId != null) localVarFormParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsPostAsync (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivitySmsPostAsyncWithHttpInfo(id, phoneId, detailId, message, draft, schedule);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="phoneId"> (optional)</param>
        /// <param name="detailId"> (optional)</param>
        /// <param name="message"> (optional)</param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsPostAsyncWithHttpInfo (string id, string phoneId = null, string detailId = null, Text message = null, bool? draft = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsPost");

            var localVarPath = "/lead/{id}/activity/sms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (phoneId != null) localVarFormParams.Add("phoneId", this.Configuration.ApiClient.ParameterToString(phoneId)); // form parameter
            if (detailId != null) localVarFormParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivitySmsSmsIdDelete (string id, string smsId)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivitySmsSmsIdDeleteWithHttpInfo(id, smsId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivitySmsSmsIdDeleteWithHttpInfo (string id, string smsId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsSmsIdDelete");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling ActivityApi->LeadIdActivitySmsSmsIdDelete");

            var localVarPath = "/lead/{id}/activity/sms/{smsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (smsId != null) localVarPathParams.Add("smsId", this.Configuration.ApiClient.ParameterToString(smsId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsSmsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsSmsIdDeleteAsync (string id, string smsId)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivitySmsSmsIdDeleteAsyncWithHttpInfo(id, smsId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsSmsIdDeleteAsyncWithHttpInfo (string id, string smsId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsSmsIdDelete");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling ActivityApi->LeadIdActivitySmsSmsIdDelete");

            var localVarPath = "/lead/{id}/activity/sms/{smsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (smsId != null) localVarPathParams.Add("smsId", this.Configuration.ApiClient.ParameterToString(smsId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsSmsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdActivitySmsSmsIdPut (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdActivitySmsSmsIdPutWithHttpInfo(id, smsId, phoneId, detailId, message, draft, schedule);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdActivitySmsSmsIdPutWithHttpInfo (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'phoneId' is set
            if (phoneId == null)
                throw new ApiException(400, "Missing required parameter 'phoneId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");

            var localVarPath = "/lead/{id}/activity/sms/{smsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (smsId != null) localVarPathParams.Add("smsId", this.Configuration.ApiClient.ParameterToString(smsId)); // path parameter
            if (phoneId != null) localVarFormParams.Add("phoneId", this.Configuration.ApiClient.ParameterToString(phoneId)); // form parameter
            if (detailId != null) localVarFormParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsSmsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdActivitySmsSmsIdPutAsync (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdActivitySmsSmsIdPutAsyncWithHttpInfo(id, smsId, phoneId, detailId, message, draft, schedule);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create sms
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="smsId">sms id</param>
        /// <param name="phoneId"></param>
        /// <param name="detailId"></param>
        /// <param name="message"></param>
        /// <param name="draft"> (optional)</param>
        /// <param name="schedule"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdActivitySmsSmsIdPutAsyncWithHttpInfo (string id, string smsId, string phoneId, string detailId, Text message, bool? draft = null, int? schedule = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'smsId' is set
            if (smsId == null)
                throw new ApiException(400, "Missing required parameter 'smsId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'phoneId' is set
            if (phoneId == null)
                throw new ApiException(400, "Missing required parameter 'phoneId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'detailId' is set
            if (detailId == null)
                throw new ApiException(400, "Missing required parameter 'detailId' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");
            // verify the required parameter 'message' is set
            if (message == null)
                throw new ApiException(400, "Missing required parameter 'message' when calling ActivityApi->LeadIdActivitySmsSmsIdPut");

            var localVarPath = "/lead/{id}/activity/sms/{smsId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (smsId != null) localVarPathParams.Add("smsId", this.Configuration.ApiClient.ParameterToString(smsId)); // path parameter
            if (phoneId != null) localVarFormParams.Add("phoneId", this.Configuration.ApiClient.ParameterToString(phoneId)); // form parameter
            if (detailId != null) localVarFormParams.Add("detailId", this.Configuration.ApiClient.ParameterToString(detailId)); // form parameter
            if (message != null) localVarFormParams.Add("message", this.Configuration.ApiClient.ParameterToString(message)); // form parameter
            if (draft != null) localVarFormParams.Add("draft", this.Configuration.ApiClient.ParameterToString(draft)); // form parameter
            if (schedule != null) localVarFormParams.Add("schedule", this.Configuration.ApiClient.ParameterToString(schedule)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdActivitySmsSmsIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

    }
}
