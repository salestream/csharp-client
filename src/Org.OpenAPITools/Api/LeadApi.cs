/* 
 * Salestream API
 *
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns></returns>
        void LeadIdGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadIdGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdPut (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdPutWithHttpInfo (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadPost (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadPostWithHttpInfo (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for leads
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns></returns>
        void LeadSearchPost (string searchString = null, List<string> columns = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for leads
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeadSearchPostWithHttpInfo (string searchString = null, List<string> columns = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadIdGetAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadIdGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdPutAsync (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdPutAsyncWithHttpInfo (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadPostAsync (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadPostAsyncWithHttpInfo (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for leads
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeadSearchPostAsync (string searchString = null, List<string> columns = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for leads
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeadSearchPostAsyncWithHttpInfo (string searchString = null, List<string> columns = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeadApi : ILeadApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadApi"/> class
        /// </summary>
        /// <returns></returns>
        public LeadApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeadApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Get lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns></returns>
        public void LeadIdGet (string id)
        {
             LeadIdGetWithHttpInfo(id);
        }

        /// <summary>
        ///  Get lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeadIdGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadApi->LeadIdGet");

            var localVarPath = "/lead/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Get lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadIdGetAsync (string id)
        {
             await LeadIdGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  Get lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeadIdGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadApi->LeadIdGet");

            var localVarPath = "/lead/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Update lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdPut (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdPutWithHttpInfo(id, company, url, description, contacts, addresses, customFields, status);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Update lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdPutWithHttpInfo (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadApi->LeadIdPut");

            var localVarPath = "/lead/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (company != null) localVarFormParams.Add("company", this.Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (addresses != null) localVarFormParams.Add("addresses", this.Configuration.ApiClient.ParameterToString(addresses)); // form parameter
            if (customFields != null) localVarFormParams.Add("custom_fields", this.Configuration.ApiClient.ParameterToString(customFields)); // form parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Update lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdPutAsync (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdPutAsyncWithHttpInfo(id, company, url, description, contacts, addresses, customFields, status);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Update lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="company"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdPutAsyncWithHttpInfo (string id, string company = null, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadApi->LeadIdPut");

            var localVarPath = "/lead/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (company != null) localVarFormParams.Add("company", this.Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (addresses != null) localVarFormParams.Add("addresses", this.Configuration.ApiClient.ParameterToString(addresses)); // form parameter
            if (customFields != null) localVarFormParams.Add("custom_fields", this.Configuration.ApiClient.ParameterToString(customFields)); // form parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Create lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadPost (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadPostWithHttpInfo(company, url, description, contacts, addresses, customFields, status);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadPostWithHttpInfo (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling LeadApi->LeadPost");

            var localVarPath = "/lead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarFormParams.Add("company", this.Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (addresses != null) localVarFormParams.Add("addresses", this.Configuration.ApiClient.ParameterToString(addresses)); // form parameter
            if (customFields != null) localVarFormParams.Add("custom_fields", this.Configuration.ApiClient.ParameterToString(customFields)); // form parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Create lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadPostAsync (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadPostAsyncWithHttpInfo(company, url, description, contacts, addresses, customFields, status);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create lead
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="company"></param>
        /// <param name="url"> (optional)</param>
        /// <param name="description"> (optional)</param>
        /// <param name="contacts"> (optional)</param>
        /// <param name="addresses"> (optional)</param>
        /// <param name="customFields"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadPostAsyncWithHttpInfo (string company, string url = null, string description = null, List<CreateLeadContacts> contacts = null, List<CreateLeadAddresses> addresses = null, Object customFields = null, string status = null)
        {
            // verify the required parameter 'company' is set
            if (company == null)
                throw new ApiException(400, "Missing required parameter 'company' when calling LeadApi->LeadPost");

            var localVarPath = "/lead";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (company != null) localVarFormParams.Add("company", this.Configuration.ApiClient.ParameterToString(company)); // form parameter
            if (url != null) localVarFormParams.Add("url", this.Configuration.ApiClient.ParameterToString(url)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (contacts != null) localVarFormParams.Add("contacts", this.Configuration.ApiClient.ParameterToString(contacts)); // form parameter
            if (addresses != null) localVarFormParams.Add("addresses", this.Configuration.ApiClient.ParameterToString(addresses)); // form parameter
            if (customFields != null) localVarFormParams.Add("custom_fields", this.Configuration.ApiClient.ParameterToString(customFields)); // form parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Search for leads
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns></returns>
        public void LeadSearchPost (string searchString = null, List<string> columns = null)
        {
             LeadSearchPostWithHttpInfo(searchString, columns);
        }

        /// <summary>
        ///  Search for leads
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LeadSearchPostWithHttpInfo (string searchString = null, List<string> columns = null)
        {

            var localVarPath = "/lead/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarFormParams.Add("searchString", this.Configuration.ApiClient.ParameterToString(searchString)); // form parameter
            if (columns != null) localVarFormParams.Add("columns", this.Configuration.ApiClient.ParameterToString(columns)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  Search for leads
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeadSearchPostAsync (string searchString = null, List<string> columns = null)
        {
             await LeadSearchPostAsyncWithHttpInfo(searchString, columns);

        }

        /// <summary>
        ///  Search for leads
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchString"> (optional)</param>
        /// <param name="columns"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LeadSearchPostAsyncWithHttpInfo (string searchString = null, List<string> columns = null)
        {

            var localVarPath = "/lead/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (searchString != null) localVarFormParams.Add("searchString", this.Configuration.ApiClient.ParameterToString(searchString)); // form parameter
            if (columns != null) localVarFormParams.Add("columns", this.Configuration.ApiClient.ParameterToString(columns)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadSearchPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
