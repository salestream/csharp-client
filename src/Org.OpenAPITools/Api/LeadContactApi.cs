/* 
 * Salestream API
 *
 * Salestream API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeadContactApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdContactsContactIdDelete (string id, string contactId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdContactsContactIdDeleteWithHttpInfo (string id, string contactId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdContactsContactIdGet (string id, string contactId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdContactsContactIdGetWithHttpInfo (string id, string contactId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdContactsContactIdPut (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdContactsContactIdPutWithHttpInfo (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contacts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdContactsGet (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contacts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdContactsGetWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse LeadIdContactsPost (string id, string name, string title = null, List<CreateContactDetails> details = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> LeadIdContactsPostWithHttpInfo (string id, string name, string title = null, List<CreateContactDetails> details = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdDeleteAsync (string id, string contactId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdDeleteAsyncWithHttpInfo (string id, string contactId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdGetAsync (string id, string contactId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdGetAsyncWithHttpInfo (string id, string contactId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdPutAsync (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// update lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdPutAsyncWithHttpInfo (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contacts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsGetAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get lead contacts
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsGetAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsPostAsync (string id, string name, string title = null, List<CreateContactDetails> details = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create lead contact
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsPostAsyncWithHttpInfo (string id, string name, string title = null, List<CreateContactDetails> details = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeadContactApi : ILeadContactApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadContactApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeadContactApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadContactApi"/> class
        /// </summary>
        /// <returns></returns>
        public LeadContactApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeadContactApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LeadContactApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  delete lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdContactsContactIdDelete (string id, string contactId)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdContactsContactIdDeleteWithHttpInfo(id, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdContactsContactIdDeleteWithHttpInfo (string id, string contactId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdDelete");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdDelete");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  delete lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdDeleteAsync (string id, string contactId)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdContactsContactIdDeleteAsyncWithHttpInfo(id, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdDeleteAsyncWithHttpInfo (string id, string contactId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdDelete");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdDelete");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdContactsContactIdGet (string id, string contactId)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdContactsContactIdGetWithHttpInfo(id, contactId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdContactsContactIdGetWithHttpInfo (string id, string contactId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdGet");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdGetAsync (string id, string contactId)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdContactsContactIdGetAsyncWithHttpInfo(id, contactId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contactId id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdGetAsyncWithHttpInfo (string id, string contactId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdGet");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdGet");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  update lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdContactsContactIdPut (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdContactsContactIdPutWithHttpInfo(id, contactId, name, title, details);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  update lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdContactsContactIdPutWithHttpInfo (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdPut");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  update lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsContactIdPutAsync (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdContactsContactIdPutAsyncWithHttpInfo(id, contactId, name, title, details);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  update lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="contactId">contact id</param>
        /// <param name="name"> (optional)</param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsContactIdPutAsyncWithHttpInfo (string id, string contactId, string name = null, string title = null, List<CreateContactDetails> details = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsContactIdPut");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling LeadContactApi->LeadIdContactsContactIdPut");

            var localVarPath = "/lead/{id}/contacts/{contactId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsContactIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead contacts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdContactsGet (string id)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdContactsGetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get lead contacts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdContactsGetWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsGet");

            var localVarPath = "/lead/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  get lead contacts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsGetAsync (string id)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdContactsGetAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get lead contacts
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsGetAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsGet");

            var localVarPath = "/lead/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Create lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse LeadIdContactsPost (string id, string name, string title = null, List<CreateContactDetails> details = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = LeadIdContactsPostWithHttpInfo(id, name, title, details);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Create lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > LeadIdContactsPostWithHttpInfo (string id, string name, string title = null, List<CreateContactDetails> details = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsPost");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LeadContactApi->LeadIdContactsPost");

            var localVarPath = "/lead/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

        /// <summary>
        ///  Create lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> LeadIdContactsPostAsync (string id, string name, string title = null, List<CreateContactDetails> details = null)
        {
             ApiResponse<SuccessResponse> localVarResponse = await LeadIdContactsPostAsyncWithHttpInfo(id, name, title, details);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Create lead contact
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">lead id</param>
        /// <param name="name"></param>
        /// <param name="title"> (optional)</param>
        /// <param name="details"> (optional)</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> LeadIdContactsPostAsyncWithHttpInfo (string id, string name, string title = null, List<CreateContactDetails> details = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LeadContactApi->LeadIdContactsPost");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LeadContactApi->LeadIdContactsPost");

            var localVarPath = "/lead/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded", 
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (title != null) localVarFormParams.Add("title", this.Configuration.ApiClient.ParameterToString(title)); // form parameter
            if (details != null) localVarFormParams.Add("details", this.Configuration.ApiClient.ParameterToString(details)); // form parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarHeaderParams["apiKey"] = this.Configuration.GetApiKeyWithPrefix("apiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LeadIdContactsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SuccessResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
        }

    }
}
